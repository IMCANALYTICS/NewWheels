/*

-----------------------------------------------------------------------------------------------------------------------------------
													    Guidelines
-----------------------------------------------------------------------------------------------------------------------------------

The provided document is a guide for the project. Follow the instructions and take the necessary steps to finish
the project in the SQL file			

-----------------------------------------------------------------------------------------------------------------------------------
                                                         Queries
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/
  
/*-- QUESTIONS RELATED TO CUSTOMERS
     [Q1] What is the distribution of customers across states?
     Hint: For each state, count the number of customers.*/
 
SELECT
	state,
    COUNT(DISTINCT customer_id) AS number_of_customers
FROM customer_t
GROUP BY state
ORDER BY number_of_customers DESC;
    
  -- ---------------------------------------------------------------------------------------------------------------------------------

/* [Q2] What is the average rating in each quarter?
-- Very Bad is 1, Bad is 2, Okay is 3, Good is 4, Very Good is 5.

Hint: Use a common table expression and in that CTE, assign numbers to the different customer ratings. 
      Now average the feedback for each quarter. 

Note: For reference, refer to question number 4. Week-2: mls_week-2_gl-beats_solution-1.sql. 
      You'll get an overview of how to use common table expressions from this question.*/

WITH customer_rating AS

(
SELECT
	quarter_number,
	CASE
		WHEN customer_feedback = 'Very Bad' THEN 1
		WHEN customer_feedback = 'Bad' THEN 2
		WHEN customer_feedback = 'Okay' THEN 3
		WHEN customer_feedback = 'Good' THEN 4
		WHEN customer_feedback = 'Very Good' THEN 5
		ELSE 0
	END AS ratings
FROM order_t
)

SELECT
	CONCAT('Q', quarter_number) AS quarter,
    ROUND(AVG(ratings),2) AS avg_customer_rating
FROM customer_rating
GROUP BY quarter
ORDER BY avg_customer_rating DESC;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* [Q3] Are customers getting more dissatisfied over time?

Hint: Need the percentage of different types of customer feedback in each quarter. Use a common table expression and
	  determine the number of customer feedback in each category as well as the total number of customer feedback in each quarter.
	  Now use that common table expression to find out the percentage of different types of customer feedback in each quarter.
      Eg: (total number of very good feedback/total customer feedback)* 100 gives you the percentage of very good feedback.
      
Note: For reference, refer to question number 4. Week-2: mls_week-2_gl-beats_solution-1.sql. 
      You'll get an overview of how to use common table expressions from this question.*/
 
 WITH quarter_feedback AS
 (
	SELECT
		CONCAT('Q', quarter_number) AS quarter,
		customer_feedback,
		COUNT(DISTINCT order_id) AS number_of_order
	FROM order_t
	GROUP BY quarter, customer_feedback
)
SELECT
	quarter,
    customer_feedback,
    number_of_order,
    SUM(number_of_order) OVER (PARTITION BY quarter) AS total_qtr_order,
    ROUND((number_of_order) / SUM(number_of_order) OVER (PARTITION BY quarter) * 100 ,2) AS percent_feedback
FROM quarter_feedback
ORDER BY quarter, percent_feedback DESC; 


-- ---------------------------------------------------------------------------------------------------------------------------------

/*[Q4] Which are the top 5 vehicle makers preferred by the customer.

Hint: For each vehicle make what is the count of the customers.*/

SELECT
	p.vehicle_maker,
    COUNT(DISTINCT o.customer_id) AS no_of_customers
FROM product_t AS p
INNER JOIN order_t AS o USING(product_id)
GROUP BY p.vehicle_maker
ORDER BY no_of_customers DESC
LIMIT 5;

-- ---------------------------------------------------------------------------------------------------------------------------------

/*[Q5] What is the most preferred vehicle make in each state?

Hint: Use the window function RANK() to rank based on the count of customers for each state and vehicle maker. 
After ranking, take the vehicle maker whose rank is 1.*/


WITH maker_per_state AS
 (
SELECT
	c.state,
	p.vehicle_maker,
		COUNT(DISTINCT o.customer_id) AS no_of_customers
FROM product_t AS p
INNER JOIN order_t AS o USING(product_id)
INNER JOIN customer_t AS c USING(customer_id)
GROUP BY  c.state, p.vehicle_maker
)
SELECT
	vehicle_maker,
    state,
    no_of_customers,
    d_rank
FROM (
	SELECT
		vehicle_maker,
		state,
		no_of_customers,
		DENSE_RANK() OVER (PARTITION BY state ORDER BY no_of_customers DESC) AS d_rank
FROM
	maker_per_state
) AS ranked_data
WHERE d_rank = 1
ORDER BY no_of_customers DESC;


-- ---------------------------------------------------------------------------------------------------------------------------------

/*QUESTIONS RELATED TO REVENUE and ORDERS 

-- [Q6] What is the trend of number of orders by quarters?

Hint: Count the number of orders for each quarter.*/

SELECT
	CONCAT ('Q',quarter_number) AS quarter,
    COUNT(DISTINCT Order_id) AS num_of_orders
FROM order_t
GROUP BY quarter
ORDER BY num_of_orders DESC;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* [Q7] What is the quarter over quarter % change in revenue? 

Hint: Quarter over Quarter percentage change in revenue means what is the change in revenue from the subsequent quarter to the previous quarter in percentage.
      To calculate you need to use the common table expression to find out the sum of revenue for each quarter.
      Then use that CTE along with the LAG function to calculate the QoQ percentage change in revenue.
*/

WITH revenue_quarter AS
(
SELECT 
	CONCAT('Q',quarter_number) AS quarter,
    ROUND(SUM(vehicle_price * quantity - discount/100 * vehicle_price),2) AS revenue
FROM order_t
GROUP BY quarter
ORDER BY revenue DESC
)

SELECT
	quarter,
    revenue,
    COALESCE(LAG(revenue) OVER (ORDER BY quarter ASC), 0) AS prior_revenue,
    CASE
		WHEN LAG(revenue) OVER (ORDER BY quarter ASC) <> 0 THEN 
        ROUND(((revenue - LAG(revenue) OVER (ORDER BY quarter ASC)) / LAG(revenue) OVER (ORDER BY quarter ASC)),2) * 100
        ELSE 0
        END AS qoq_percentage_change
FROM revenue_quarter;
	
-- ---------------------------------------------------------------------------------------------------------------------------------

/* [Q8] What is the trend of revenue and orders by quarters?

Hint: Find out the sum of revenue and count the number of orders for each quarter.*/

SELECT
 CONCAT('Q', quarter_number) AS quarter,
 COUNT(DISTINCT order_id) AS order_count,
 ROUND(SUM(vehicle_price * quantity - discount/100 * vehicle_price),2) AS revenue
FROM order_t
GROUP BY quarter
ORDER BY quarter;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* QUESTIONS RELATED TO SHIPPING 
    [Q9] What is the average discount offered for different types of credit cards?

Hint: Find out the average of discount for each credit card type.*/

SELECT
	credit_card_type,
    ROUND(AVG(discount),2) AS avg_discount
FROM customer_t AS c
INNER JOIN order_t AS o USING(customer_id)
GROUP BY credit_card_type
ORDER BY avg_discount DESC;

-- ---------------------------------------------------------------------------------------------------------------------------------

/* [Q10] What is the average time taken to ship the placed orders for each quarters?
	Hint: Use the dateiff function to find the difference between the ship date and the order date.
*/

SELECT
	CONCAT('Q', quarter_number) AS quarter,
    ROUND(AVG(DATEDIFF(ship_date, order_date)),2) AS avg_shipping_time
FROM order_t
GROUP BY quarter
ORDER BY quarter;    


-- --------------------------------------------------------Done----------------------------------------------------------------------
-- ----------------------------------------------------------------------------------------------------------------------------------



